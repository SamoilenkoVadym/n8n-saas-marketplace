// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String              @id @default(uuid())
  email           String              @unique
  passwordHash    String
  name            String?
  credits         Int                 @default(50)
  role            String              @default("user")
  templates       Template[]
  purchases       Purchase[]
  payments        Payment[]
  conversations   AiConversation[]
  n8nConnection   UserN8nConnection?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model Template {
  id           String     @id @default(uuid())
  name         String
  description  String     @db.Text
  category     String
  tags         String[]
  price        Int        @default(0)
  workflowJson Json
  previewImage String?
  downloads    Int        @default(0)
  authorId     String
  author       User       @relation(fields: [authorId], references: [id])
  purchases    Purchase[]
  isPublished  Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Purchase {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  templateId String
  template   Template @relation(fields: [templateId], references: [id])
  credits    Int
  createdAt  DateTime @default(now())
}

model Payment {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  amount          Int
  credits         Int
  status          String   @default("pending")
  stripeSessionId String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model AiConversation {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  messages  Json     // Array of {role: 'user'|'assistant', content: string}
  workflow  Json?    // Generated n8n workflow JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserN8nConnection {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  apiKey    String   // Encrypted with crypto
  baseUrl   String   // User's n8n instance URL
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}